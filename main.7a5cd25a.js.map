{"version":3,"sources":["scripts/main.js"],"names":["trList","document","querySelectorAll","thList","querySelector","tbody","cellsArray","cell","push","children","textContent","replace","addEventListener","clickEvent","column","target","sort","a","b","String","innerHTML","forEach","element","newRow","createElement","insertAdjacentHTML","Name","Position","Age","Salary","toLocaleString","append"],"mappings":";AAAA,aAiBA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAfA,IAeA,EAfMA,EAASC,SAASC,iBAAiB,YACnCC,EAASF,SAASG,cAAc,YAChCC,EAAQJ,SAASG,cAAc,SAE/BE,EAAa,GAEAN,EAAAA,EAAAA,GASnB,IAT2B,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAhBO,IAAAA,EAAgB,EAAA,MACzBD,EAAWE,KAAK,CACND,KAAAA,EAAKE,SAAS,GAAGC,YACbH,SAAAA,EAAKE,SAAS,GAAGC,YACtBH,IAAAA,EAAKE,SAAS,GAAGC,YACd,QAACH,EAAKE,SAAS,GAAGC,YAAYC,QAAQ,IAAK,IAAIA,QAAQ,MAAO,OAI5E,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAAAR,EAAOS,iBAAiB,QAAS,SAACC,GAC1BC,IAAAA,EAASD,EAAWE,OAAOL,YAEjCJ,EAAWU,KAAK,SAACC,EAAGC,GACd,MAAqB,iBAAdD,EAAEH,GACJG,EAAEH,GAAUI,EAAEJ,GAGhBK,OAAOF,EAAEH,IAAWK,OAAOD,EAAEJ,KAAY,EAAI,IAGtDT,EAAMe,UAAY,GAElBd,EAAWe,QAAQ,SAAAC,GACXC,IAAAA,EAAStB,SAASuB,cAAc,MAEtCD,EAAOE,mBAAmB,aACjBH,OAAAA,OAAAA,EAAQI,KACRJ,sBAAAA,OAAAA,EAAQK,SACRL,sBAAAA,OAAAA,EAAQM,IACR,sBAAA,OAAA,IAAMN,EAAQO,OAAOC,eAAe,SAPjB,kBAS5BzB,EAAM0B,OAAOR","file":"main.7a5cd25a.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst trList = document.querySelectorAll('tbody tr');\nconst thList = document.querySelector('thead tr');\nconst tbody = document.querySelector('tbody');\n\nconst cellsArray = [];\n\nfor (const cell of trList) {\n  cellsArray.push({\n    'Name': cell.children[0].textContent,\n    'Position': cell.children[1].textContent,\n    'Age': cell.children[2].textContent,\n    'Salary': +cell.children[3].textContent.replace('$', '').replace(/,/gi, ''),\n  });\n}\n\nthList.addEventListener('click', (clickEvent) => {\n  const column = clickEvent.target.textContent;\n\n  cellsArray.sort((a, b) => {\n    if (typeof a[column] === 'number') {\n      return a[column] - b[column];\n    }\n\n    return String(a[column]) < String(b[column]) ? -1 : 1;\n  });\n\n  tbody.innerHTML = '';\n\n  cellsArray.forEach(element => {\n    const newRow = document.createElement('tr');\n\n    newRow.insertAdjacentHTML('afterbegin',\n      `<td>${element.Name}</td>\n       <td>${element.Position}</td>\n       <td>${element.Age}</td>\n       <td>${'$' + element.Salary.toLocaleString('en-US')}</td>\n      `); // can be done dynamicaly with the loop\n    tbody.append(newRow);\n  });\n});\n"]}